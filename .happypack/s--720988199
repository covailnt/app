'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elements = require('components/elements');

require('./DropDown.scss');

var _theme = require('theme');

var _theme2 = _interopRequireDefault(_theme);

var _aphrodite = require('aphrodite');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _aphrodite.StyleSheet.create({
  icon: {
    color: _theme2.default.color.black
  }
});

var DropDown = function (_Component) {
  _inherits(DropDown, _Component);

  function DropDown(props) {
    _classCallCheck(this, DropDown);

    var _this = _possibleConstructorReturn(this, (DropDown.__proto__ || Object.getPrototypeOf(DropDown)).call(this, props));

    _this.state = {
      value: props.items[0],
      open: false,
      size: 0
    };
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(DropDown, [{
    key: 'handleChange',
    value: function handleChange(e) {
      this.setState({ value: e.target.value });
    }
  }, {
    key: 'updateVal',
    value: function updateVal(e) {
      this.setState({ donutval: e.target.value });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          items = _props.items,
          placeholder = _props.placeholder;

      return _react2.default.createElement(
        'div',
        { className: 'select-ctn' },
        _react2.default.createElement(_elements.Select, {
          handleChange: this.handleChange,
          items: items,
          name: name,
          value: this.state.value,
          placeholder: placeholder
        }),
        _react2.default.createElement(_elements.Fa, { className: (0, _aphrodite.css)(styles.icon), icon: 'angle-down' })
      );
    }
  }]);

  return DropDown;
}(_react.Component);

exports.default = DropDown;